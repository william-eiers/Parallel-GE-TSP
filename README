CS140 Final Project
- William Eiers 7859812
- Armin Akhbari 8285298

Our project is the implementation of a parallel genetic algorithm as a heuristic
for the Traveling Salesman Problem. Read the report for details of the algorithm.
This file contains instructions on how to compile and run the program.

If you want to input your own list of cities, you need to pass in the distance
matrix for those cities. This file contains the number of cities, followed by
a matrix containing the distance from city i to city j. As an example, if you have
3 cities with the distances (1,2) = 3, (1,3) = 5 (2,3) = 8, the input file would be

3
0 3 5
3 0 8
5 8 0

The program outputs the number of MPI nodes used, number of processors OpenMP uses,
the optimal tour of cities, as well as the optimal tour distance.

Also contained is a python script to convert a list of cities with x,y coordinates
to a distance matrix. However, this is script is a bit fragile: to edit the input 
and output file names, you must edit the actual code. As the tool is very short,
this isn't complicated. Just change the file read from, and the one output to.
Format for file:
#cities
1 x1 y2
2 x2 y2
...

COMPILING PROGRAM:
mpicc -openmp -o <exectutable> *.cpp

RUNNING PROGRAM
mpirun -machinefile $PBS_NODEFILE -np 
					<number of nodes> 
					./<exeutable>
					<size of initial population>
					<number of generations>
					<input distance matrix file>
					<chance of mutation (int)>
					<parent/child ratio (int)>
					<number of cities>
					<read/random option>

e.g., to compile the code and run the program with 4 nodes on triton,
executable "prog", 1000 initial chromosomes, distance matrix file "distances"
300 generations, 5 percent chance of mutation, new population for each generation
contains 1 part child, 1 part parent, 194 cities, and option 1 for reading...

mpirun -machinefile $PBS_NODEFILE -np 2 ./prog 1000 300 distances 5 2 194 1
